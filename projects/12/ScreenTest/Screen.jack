// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 256 rows (indexed 0..255, top to bottom)
 * of 512 pixels each (indexed 0..511, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
    static boolean black;
    static Array twoToTheJ;

    /** Initializes the Screen. */
    function void init() {
        let black=true;
        let twoToTheJ=Array.new(16);
        let twoToTheJ[0]=1;
        let twoToTheJ[1]=2;
        let twoToTheJ[2]=4;
        let twoToTheJ[3]=8;
        let twoToTheJ[4]=16;
        let twoToTheJ[5]=32;
        let twoToTheJ[6]=64;
        let twoToTheJ[7]=128;
        let twoToTheJ[8]=256;
        let twoToTheJ[9]=512;
        let twoToTheJ[10]=1024;
        let twoToTheJ[11]=2048;
        let twoToTheJ[12]=4096;
        let twoToTheJ[13]=8192;
        let twoToTheJ[14]=16384;
        let twoToTheJ[15]=twoToTheJ[14]+twoToTheJ[14];
        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int c;
        var int r;
        let c=0;
        let r=0;
        while(c<512){
            while(r<256){
                do Memory.poke(16384+r*32+c/16,0);
                let r=r+1;
            }
            let c=c+1;
        }
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let black=b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int c;
        if(black){
            let c=twoToTheJ[x-(16*(x/16))] | Memory.peek(16384+((32*y)+(x/16)));
        } else {
            let c=~(twoToTheJ[x-(16*(x/16))]) & Memory.peek(16384+((32*y)+(x/16)));
        }
        do Memory.poke(16384+((32*y)+(x/16)),c);
        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int a;
        var int b;
        var int dx;
        var int dy;
        var int x;
        var int y;
        var int adyMinusbdx;
        let a=0;
        let b=0;
        let adyMinusbdx=0;
        let dx=Math.abs(x2-x1);
        let dy=Math.abs (y2-y1);
        if(dx=0){
            while(~(b=dy)){
                if(y2>y1){
                    let y=y1+b;
                }
                else{
                    let y=y1-b;
                }
                do Screen.drawPixel(x1,y);
                let b=b+1;
            }
            return;
        }
        if(dy=0){
            while(~(a=dx)){
                if(x2>x1){
                    let x=x1+a;
                }
                else {
                    let x=x1-a;
                }
                do Screen.drawPixel(x,y1);
                let a=a+1;
            }
            return;

        }
        while (~(a>dx) & ~(b>dy)){
            if(x2>x1){
                let x=x1+a;
            }
            else {
                let x=x1-a;
            }
            if(y2>y1){
                let y=y1+b;
            }
            else{
                let y=y1-b;
            }
            do Screen.drawPixel(x,y);
            if(adyMinusbdx<0){
                let a=a+1;
                let adyMinusbdx=adyMinusbdx+dy;
            } 
            else {
                let b=b+1;
                let adyMinusbdx=adyMinusbdx-dx;
            }
        }
        return;

    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        var int x;
        let x=x1;
        while(~(x>x2)){
            do Screen.drawLine(x,y1,x,y2);
            let x=x+1;
        }
        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int dy;
        let dy=-r;
        while(~(dy>r)){
            do Screen.drawLine(x-Math.sqrt((r*r)-(dy*dy)),y+dy,x+Math.sqrt((r*r)-(dy*dy)),y+dy);
            let dy=dy+1;
        }
        return;
    }
}
